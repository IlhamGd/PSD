Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
from pycaret.anomaly import *
from tabulate import tabulate

# Hapus kolom target (class) kalau ada
if "class" in df.columns:
    target = df["class"]   # simpan target dulu biar tidak hilang
    df = df.drop("class", axis=1)
else:
    target = None

# === 2. Setup PyCaret ===
s = setup(data=df, session_id=123, verbose=False)

# === 3. Pilih model (misal LOF, bisa diganti 'abod' atau 'knn') ===
model = create_model("abod", fraction=0.05)

# === 4. Assign hasil deteksi ===
results = assign_model(model)

# === 5. Hapus data outlier (Anomaly = 1) ===
df_clean = results[results["Anomaly"] == 0].drop(columns=["Anomaly", "Anomaly_Score"])

# Gabungkan lagi dengan class kalau ada
if target is not None:
    df_clean["class"] = target.loc[df_clean.index]

# === 6. Tampilkan hasil bersih ===
print(tabulate(df_clean.head(10), headers="keys", tablefmt="grid"))
print(f"\nJumlah data asli: {len(results)}")
print(f"Jumlah data setelah buang outlier: {len(df_clean)}")

------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 2[39m
[32m      1[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mpd[39;00m
[32m----> [39m[32m2[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mpycaret[39;00m[34;01m.[39;00m[34;01manomaly[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m *
[32m      3[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mtabulate[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m tabulate
[32m      5[39m [38;5;66;03m# Hapus kolom target (class) kalau ada[39;00m

[31mModuleNotFoundError[39m: No module named 'pycaret'

